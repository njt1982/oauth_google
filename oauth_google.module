<?php
/**
 * @file
 * OAuth client library for Google Apps
 */

// Authorization callback URL
define('OAUTH_GOOGLE_AUTHORIZE_PATH', 'oauth/google/authorized');

// Default scope: Documents List, Calendar, Contacts
define('OAUTH_GOOGLE_DEFAULT_SCOPE', 'http://docs.google.com/feeds/ http://www.google.com/calendar/feeds/ http://www.google.com/m8/feeds/ http://tables.googlelabs.com/api/query/');

/**
 * Implementation of hook_menu()
 */
function oauth_google_menu() {
  // Admin pages
  $items['admin/settings/oauth/google'] = array(
    'title' => 'Google',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oauth_google_admin_settings_form'),
    'access arguments' => array('administer google data'),
    'file' => 'oauth_google.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[OAUTH_GOOGLE_AUTHORIZE_PATH] = array(
    'title' => 'Authorization finished',
    'page callback' => 'oauth_google_authorize_callback',
    'access callback' => '_oauth_common_always_true',
    'file' => 'oauth_google.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/oauth/google'] = array(
    'title' => 'Google OAuth',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oauth_google_user_account_form', 1),
    'access arguments' => array('administer google data'),
    'file' => 'oauth_google.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Get default consumer, creates a new one if missing
 */
function oauth_google_get_consumer($params = array()) {
  $params += array(
    'key' => variable_get('oauth_google_consumer_key', ''),
    'secret' => variable_get('oauth_google_consumer_secret', ''),
    'name' => 'Google OAuth',
    'type' => 'google',
    'callback_url' => oauth_google_callback_url(),
  );

  if (!empty($params['key'])) {
    if ($consumer = DrupalOAuthConsumer::load($params['key'], FALSE)) {
      return $consumer;
    }
    elseif (!empty($params['secret'])) {
      $consumer_params = array(
        'name' => $params['name'],
        'type' => $params['type'],
      );
      $consumer_params['configuration'] = array(
        'provider_url' => 'https://www.google.com/accounts',
        'request_endpoint' => 'https://www.google.com/accounts/OAuthGetRequestToken',
        'authorization_endpoint' => 'https://www.google.com/accounts/OAuthAuthorizeToken',
        'access_endpoint' => 'https://www.google.com/accounts/OAuthGetAccessToken',
        'signature_method' => 'SHA1',      
      );
      $consumer = new DrupalOAuthConsumer($params['key'], $params['secret'] , $params['callback_url'] , FALSE, $consumer_params);
      $consumer->write();
      return $consumer;
    }
  }
}

/**
 * Get authorization url callback
 */
function oauth_google_callback_url() {
  return url(OAUTH_GOOGLE_AUTHORIZE_PATH, array('absolute' => TRUE));
}

/**
 * Get access/request token for user account
 */
function oauth_google_get_user_token($account, $consumer, $type = 'access') {
  $result = db_query("SELECT * from {oauth_common_token} WHERE type = '%s' AND consumer_key = '%s' AND uid = %d", $type, $consumer->key, $account->uid);
  if ($token = DrupalOAuthToken::fromResult($result)) {
    return $token;
  }
}

/**
 * Get request token for user account
 * 
 * @param $options
 *   Aditional options for DrupalOAuthClient
 */
function oauth_google_create_request_token($consumer, $account, $options = array(), $client = NULL) {
  $client = $client ? $client : new DrupalOAuthClient($consumer);
  $options += array(
    'get' => TRUE,
    'params' => array(),
    'callback' => oauth_google_callback_url(),
  );
  $options['params'] += array(
    'scope' => oauth_google_get_scope(),
  );
  if ($token = $client->getRequestToken(NULL, $options)) {
    $token->uid = $account->uid;
    $token->write();
    return $token;
  }
}

/**
 * Get authorization url
 */
function oauth_google_authorize_url($consumer, $request_token, $options = array(), $client = NULL) {
  $client = $client ? $client : new DrupalOAuthClient($consumer, $request_token);
  $options += array(
    'params' => array(),
  );
  $options['params'] += array(
    'hd' => variable_get('oauth_google_default_domain', 'default')
  );
  return $client->getAuthorizationUrl(NULL, $options);
}

/**
 * Create access token, request from server
 */
function oauth_google_create_access_token($consumer, $request_token, $oauth_verifier = NULL, $client = NULL) {
  $client = $client ? $client : new DrupalOAuthClient($consumer, $request_token);
  $options = array(
    'verifier' => $oauth_verifier,
    'get' => TRUE,
  );
  if ($access_token = $client->getAccessToken(NULL, $options)) {
    db_query("DELETE FROM {oauth_common_token} WHERE uid = %d AND consumer_key = '%s'", $request_token->uid, $consumer->key);
    $access_token->uid = $request_token->uid;
    $access_token->write();
    return $access_token;
  }
}

/**
 * Get scope as single string
 */
function oauth_google_get_scope() {
  return variable_get('oauth_google_default_scope', OAUTH_GOOGLE_DEFAULT_SCOPE);
}

/**
 * Request wrapper for the Google API
 */
function oauth_google_request($args = array()) {
  $args += array(
    'url' => GOOGLE_API_URL,
    'method' => 'GET',
    'data' => '',
    'etag' => NULL,
    'request_type' => 'json',
  );

  $params = array();
  if ($args['request_type'] == 'json') {
    $params['alt'] = 'json';
  }
  
  global $user;
  $consumer = oauth_google_get_consumer();
  $token = oauth_google_get_user_token($user, $consumer, 'access');
  $sigMethod = new OAuthSignatureMethod_HMAC_SHA1();
  
  $request = OAuthRequest::from_consumer_and_token($consumer, $token, $args['method'], $args['url'], $params);
  $request->sign_request($sigMethod, $consumer, $token);

  list($key, $value) = explode(': ', $request->to_header());
  $headers = array(
    $key => $value,
    'GData-Version' => '2.0',
    'Content-Type' => $args['request_type'] == 'json' ? 'application/json' : 'application/atom+xml',
  );

  // If we have an etag, pass a * in If-Match which forces google to use the etag in the XML
  if ($args['etag']) {
    $headers['If-Match'] = '*';
  }

  $url = $request->get_normalized_http_url() .($args['request_type'] == 'json' ? '?alt=json' : '');
  return drupal_http_request($url, $headers, $args['method'], $args['data']);
}
